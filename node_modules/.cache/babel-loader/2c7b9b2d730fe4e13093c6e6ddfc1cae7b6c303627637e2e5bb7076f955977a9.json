{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderwojno/Desktop/Vince-Checked_Dice/src/pages/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Die from '../Die';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  //Bonus Function1 //\n\n  function threePairs(dice) {\n    const encounteredDice = {};\n    dice.forEach(die => {\n      if (encounteredDice[die]) {\n        encounteredDice[die]++;\n      } else {\n        encounteredDice[die] = 1;\n      }\n    });\n    let numPairs = 0;\n    for (const die in encounteredDice) {\n      if (encounteredDice[die] === 2) {\n        numPairs++;\n      }\n    }\n    return numPairs === 3;\n  }\n  function bigMultiplier(dice) {\n    const encounteredDice = {};\n    dice.forEach(die => {\n      if (encounteredDice[die]) {\n        encounteredDice[die]++;\n      } else {\n        encounteredDice[die] = 1;\n      }\n    });\n    let currentScoreMultiplier = 1;\n    let currentScoreToAdd = 0;\n    for (const die in encounteredDice) {\n      const count = encounteredDice[die];\n      if (count === 3) {\n        if (die === '1') {\n          currentScoreToAdd += 1000;\n        } else {\n          currentScoreToAdd += parseInt(die, 10) * 100;\n        }\n      } else if (count === 4) {\n        currentScoreMultiplier = 2;\n        currentScoreToAdd += parseInt(die, 10) * 100 * currentScoreMultiplier;\n      } else if (count === 5) {\n        currentScoreMultiplier *= 2;\n        currentScoreToAdd += parseInt(die, 10) * 100 * currentScoreMultiplier;\n      } else if (count === 6) {\n        currentScoreMultiplier *= 2;\n        currentScoreToAdd += parseInt(die, 10) * 100 * currentScoreMultiplier;\n      }\n    }\n    return currentScoreToAdd;\n  }\n  //Bonus Function 2//\n  function straightFlush(dice) {\n    const encounteredDice = {};\n    dice.forEach(die => {\n      if (encounteredDice[die]) {\n        encounteredDice[die]++;\n      } else {\n        encounteredDice[die] = 1;\n      }\n    });\n    for (let i = 1; i <= 6; i++) {\n      if (!encounteredDice[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  //Bonus Function 3//\n  function isTriplet(heldDice) {\n    const encounteredDice = {};\n    heldDice.forEach(die => {\n      if (encounteredDice[die.value]) {\n        encounteredDice[die.value]++;\n      } else {\n        encounteredDice[die.value] = 1;\n      }\n    });\n    for (const value in encounteredDice) {\n      if (encounteredDice[value] >= 3) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  //BONUS FUNCTION 4\n\n  //\n  const [dice, setDice] = useState([{\n    id: nanoid(),\n    value: 0,\n    isHeld: false\n  }, {\n    id: nanoid(),\n    value: 0,\n    isHeld: false\n  }, {\n    id: nanoid(),\n    value: 0,\n    isHeld: false\n  }, {\n    id: nanoid(),\n    value: 0,\n    isHeld: false\n  }, {\n    id: nanoid(),\n    value: 0,\n    isHeld: false\n  }, {\n    id: nanoid(),\n    value: 0,\n    isHeld: false\n  }]);\n  const [bankedScore, setBankedScore] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [diceSet, setDiceSet] = useState(false);\n  const [newDiceBtnDisabled, setNewDiceBtnDisabled] = useState(false);\n  const [rollBtnDisabled, setRollBtnDisabled] = useState(false);\n  const [busted, setBusted] = useState(false);\n  const [bankerinoBlock, setBankerinoBlock] = useState(false);\n  const [endTurnBtnDisabled, setEndTurnBtnDisabled] = useState(true);\n  const [bustCount, setBustCount] = useState(0);\n  const [message, setMessage] = useState('');\n  const [threeBigPairs, setThreeBigPairs] = useState(false);\n  const [theStraightFlush, setTheStraightFlush] = useState(false);\n  function holdDice(id) {\n    setDice(oldDice => oldDice.map(die => {\n      return die.id === id ? {\n        ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  }\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  function bankPoints() {\n    const heldDiceValues = dice.filter(die => die.isHeld).map(die => die.value);\n    if (isTriplet(heldDiceValues)) {\n      const counts = {};\n      heldDiceValues.forEach(value => {\n        counts[value] = (counts[value] || 0) + 1;\n      });\n      for (const value in counts) {\n        let scoreToAdd = 0;\n        let messageToAdd = '';\n        const count = counts[value];\n        if (count >= 3) {\n          setBusted(false);\n          if (value === 1) {\n            scoreToAdd += value * 1000 * 2 ** (count - 3);\n          } else if (value === 2 || value === 3 || value === 4 || value === 5 || value === 6) {\n            scoreToAdd += value * 100 * 2 ** (count - 3);\n          }\n          messageToAdd = `Multiplier x${count}!`;\n        }\n        setMessage(messageToAdd);\n        setTheTriplet(true);\n        setCurrentScore(currentScore + scoreToAdd);\n      }\n    }\n\n    ///////////////////////////////////////////\n\n    //////////////////////////////////////////// \n    if (straightFlush(heldDiceValues)) {\n      setDice(oldDice => oldDice.map(die => heldDiceValues.includes(die.value) ? {\n        ...die,\n        value: 0\n      } : die));\n      setTheStraightFlush(true);\n      setCurrentScore(currentScore + 1000);\n      setNewDiceBtnDisabled(false);\n      return;\n    }\n    const bigScore = bigMultiplier(heldDiceValues);\n    if (bigScore > 0) {\n      setDice(oldDice => oldDice.map(die => heldDiceValues.includes(die.value) ? {\n        ...die,\n        value: 0\n      } : die));\n      setCurrentScore(currentScore + bigScore);\n      setRollBtnDisabled(false);\n      return;\n    }\n    if (threePairs(heldDiceValues)) {\n      setDice(oldDice => oldDice.map(die => heldDiceValues.includes(die.value) ? {\n        ...die,\n        value: 0\n      } : die));\n      setThreeBigPairs(true);\n      setCurrentScore(currentScore + 500);\n      setNewDiceBtnDisabled(false);\n      return;\n    } else {\n      if (!busted) {\n        setRollBtnDisabled(false);\n      } else {\n        setRollBtnDisabled(false);\n        setRollBtnDisabled(true);\n        setBankerinoBlock(true);\n      }\n      let ones = 0;\n      let fives = 0;\n      let newDice = [...dice];\n      for (let i = 0; i < 6; i++) {\n        if (newDice[i].isHeld && (newDice[i].value === 1 || newDice[i].value === 5)) {\n          if (newDice[i].value === 1) {\n            ones++;\n          } else {\n            fives++;\n          }\n          newDice[i].isHeld = false;\n          newDice[i].value = 0;\n        }\n      }\n      setDice(newDice);\n      setCurrentScore(currentScore + ones * 100 + fives * 50);\n      if (ones === 0 && fives === 0) {\n        setBusted(true);\n        setCurrentScore(0);\n      } else {\n        setBusted(false);\n      }\n    }\n  }\n  ;\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   \n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const endTurn = () => {\n    setBankedScore(currentScore + bankedScore);\n    setCurrentScore(0);\n    setThreeBigPairs(false);\n    newSet();\n  };\n  const rollDice = () => {\n    if (currentScore > 350) {\n      setEndTurnBtnDisabled(false);\n    } else {\n      setEndTurnBtnDisabled(true);\n    }\n    setRollBtnDisabled(true);\n    setThreeBigPairs(false);\n    setTheTriplet(false);\n    let newDice;\n    if (currentScore > 0) {\n      newDice = dice.map(die => {\n        return die.value !== 0 ? {\n          ...die,\n          value: Math.floor(Math.random() * 6) + 1,\n          isHeld: die.isHeld = false\n        } : {\n          ...die\n        };\n      });\n    } else {\n      newDice = !dice.map(die => {\n        return die.value !== 0 ? {\n          ...die,\n          value: Math.floor(Math.random() * 6) + 1\n        } : {\n          ...die\n        };\n      });\n    }\n    const onesAndFives = newDice.filter(die => die.value === 1 || die.value === 5);\n    if (onesAndFives.length === 0) {\n      setTimeout(() => {\n        setBusted(true);\n        setRollBtnDisabled(true);\n        setCurrentScore(0);\n        setMessage( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"YOU BUSTED!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 18\n        }, this));\n        return message;\n      }, 300);\n    } else {\n      setBusted(false);\n    }\n    setDice(newDice);\n  };\n  const resetGame = () => {\n    setThreeBigPairs(false);\n    setTheTriplet(false);\n    setTheStraightFlush(false);\n    setBankedScore(0);\n    setCurrentScore(0);\n    localStorage.clear();\n    setBustCount(0);\n    newSet();\n  };\n  const newSet = () => {\n    setThreeBigPairs(false);\n    setTheStraightFlush(false);\n    setRollBtnDisabled(true);\n    setTheTriplet(false);\n    setNewDiceBtnDisabled(true);\n    setBankerinoBlock(false);\n    const newDice = [];\n    for (let i = 0; i < 6; i++) {\n      newDice.push({\n        id: nanoid(),\n        value: Math.floor(Math.random() * 6) + 1,\n        isHeld: false\n      });\n    }\n    setDice(newDice);\n    setDiceSet(true);\n    setBusted(false);\n  };\n  useEffect(() => {\n    if (busted) {\n      localStorage.setItem('bankedScore', bankedScore);\n      setRollBtnDisabled(true);\n      setNewDiceBtnDisabled(false);\n      setBankerinoBlock(true);\n      setEndTurnBtnDisabled(true);\n      setBustCount(bustCount + 1);\n    }\n  }, [busted]);\n  useEffect(() => {\n    if (currentScore < 350) {\n      setEndTurnBtnDisabled(true);\n    } else {\n      setEndTurnBtnDisabled(false);\n    }\n  }, [currentScore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"bankedText\",\n          children: [\"Score: \", bankedScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"bustedText\",\n          children: [\"Busts: \", bustCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: busted ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"gameh1\",\n          children: \"YOU BUSTED!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this) : threeBigPairs ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"gameh1\",\n          children: \"Three Pairs! +500!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this) : theStraightFlush ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"gameh1\",\n          children: \"Straight Flush, +1000!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 12\n        }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"gameh1\",\n          children: [\"BANKED: \", currentScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"endTurnBtn\",\n          onClick: endTurn,\n          disabled: endTurnBtnDisabled,\n          children: \"End Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"resetBtn\",\n          onClick: resetGame,\n          children: \"Reset Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-container\",\n        children: busted ? null : dice.map(die => die.value !== 0 &&\n        /*#__PURE__*/\n        // Add this line to only render dice that haven't been banked\n        _jsxDEV(Die, {\n          id: die.id,\n          value: die.value,\n          isHeld: die.isHeld,\n          holdDice: () => holdDice(die.id)\n        }, die.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons1\",\n        children: [diceSet && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rollBtn\",\n          onClick: rollDice,\n          disabled: rollBtnDisabled,\n          children: \"Roll Dice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"newDiceBtn\",\n          onClick: newSet,\n          disabled: newDiceBtnDisabled,\n          children: \"New Dice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bankBtn\",\n          onClick: bankPoints,\n          disabled: bankerinoBlock,\n          children: \"Bank Points\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"8biptk6NFdrABHxRukV7ncAr9VM=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Die","nanoid","jsxDEV","_jsxDEV","Game","_s","threePairs","dice","encounteredDice","forEach","die","numPairs","bigMultiplier","currentScoreMultiplier","currentScoreToAdd","count","parseInt","straightFlush","i","isTriplet","heldDice","value","setDice","id","isHeld","bankedScore","setBankedScore","currentScore","setCurrentScore","diceSet","setDiceSet","newDiceBtnDisabled","setNewDiceBtnDisabled","rollBtnDisabled","setRollBtnDisabled","busted","setBusted","bankerinoBlock","setBankerinoBlock","endTurnBtnDisabled","setEndTurnBtnDisabled","bustCount","setBustCount","message","setMessage","threeBigPairs","setThreeBigPairs","theStraightFlush","setTheStraightFlush","holdDice","oldDice","map","bankPoints","heldDiceValues","filter","counts","scoreToAdd","messageToAdd","setTheTriplet","includes","bigScore","ones","fives","newDice","endTurn","newSet","rollDice","Math","floor","random","onesAndFives","length","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","resetGame","localStorage","clear","push","setItem","className","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/alexanderwojno/Desktop/Vince-Checked_Dice/src/pages/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Die from '../Die';\nimport { nanoid } from 'nanoid';\n\nfunction Game() {\n\n    //Bonus Function1 //\n\n    function threePairs(dice) {\n        const encounteredDice = {};\n        dice.forEach(die => {\n            if (encounteredDice[die]) {\n            encounteredDice[die]++;\n            } else {\n            encounteredDice[die] = 1;\n            }\n        });\n\n        let numPairs = 0;\n        for (const die in encounteredDice) {\n            if (encounteredDice[die] === 2) {\n            numPairs++;\n            }\n        }\n\n        return numPairs === 3;\n        }\n\n    function bigMultiplier(dice) {\n        const encounteredDice = {};\n        dice.forEach((die) => {\n            if (encounteredDice[die]) {\n            encounteredDice[die]++;\n            } else {\n            encounteredDice[die] = 1;\n            }\n        });\n\n        let currentScoreMultiplier = 1;\n        let currentScoreToAdd = 0;\n\n        for (const die in encounteredDice) {\n            const count = encounteredDice[die];\n            if (count === 3) {\n            if (die === '1') {\n                currentScoreToAdd += 1000;\n            } else {\n                currentScoreToAdd += parseInt(die, 10) * 100;\n            }\n            } else if (count === 4) {\n            currentScoreMultiplier = 2;\n            currentScoreToAdd += parseInt(die, 10) * 100 * currentScoreMultiplier;\n            } else if (count === 5) {\n            currentScoreMultiplier *= 2;\n            currentScoreToAdd += parseInt(die, 10) * 100 * currentScoreMultiplier;\n            } else if (count === 6) {\n            currentScoreMultiplier *= 2;\n            currentScoreToAdd += parseInt(die, 10) * 100 * currentScoreMultiplier;\n            }\n        }\n\n        return currentScoreToAdd;\n        }\n//Bonus Function 2//\n        function straightFlush(dice) {\n          const encounteredDice = {};\n          dice.forEach(die => {\n            if (encounteredDice[die]) {\n              encounteredDice[die]++;\n            } else {\n              encounteredDice[die] = 1;\n            }\n          })\n          for (let i = 1; i <= 6; i++) {\n            if (!encounteredDice[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n//Bonus Function 3//\n          function isTriplet(heldDice) {\n            const encounteredDice = {};\n            heldDice.forEach(die => {\n              if (encounteredDice[die.value]) {\n                encounteredDice[die.value]++;\n              } else {\n                encounteredDice[die.value] = 1;\n              }\n            });\n\n            for (const value in encounteredDice) {\n              if (encounteredDice[value] >= 3) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n\n//BONUS FUNCTION 4\n\n//\n  const [dice, setDice] = useState([\n    { id: nanoid(), value: 0, isHeld: false },\n    { id: nanoid(), value: 0, isHeld: false },\n    { id: nanoid(), value: 0, isHeld: false },\n    { id: nanoid(), value: 0, isHeld: false },\n    { id: nanoid(), value: 0, isHeld: false },\n    { id: nanoid(), value: 0, isHeld: false },\n  ]);\n  \n\n\n  const [bankedScore, setBankedScore] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [diceSet, setDiceSet] = useState(false);\n  const [newDiceBtnDisabled, setNewDiceBtnDisabled] = useState(false);\n  const [rollBtnDisabled, setRollBtnDisabled] = useState(false)\n  const [busted, setBusted] = useState(false);\n  const [bankerinoBlock, setBankerinoBlock] = useState(false)\n  const [endTurnBtnDisabled, setEndTurnBtnDisabled] = useState(true)\n  const [bustCount, setBustCount]=useState(0)\n  const [message, setMessage] = useState('')\n  const [threeBigPairs, setThreeBigPairs] = useState(false)\n  const [theStraightFlush, setTheStraightFlush] = useState(false)\n\n\n  function holdDice(id) {\n    setDice(oldDice => oldDice.map(die => {\n      return die.id === id ?\n        {...die, isHeld: !die.isHeld} :\n        die\n    }))\n  }\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nfunction bankPoints() {\n  const heldDiceValues = dice.filter(die => die.isHeld).map(die => die.value);\n    \n    if (isTriplet(heldDiceValues)){\n           const counts = {};\n    heldDiceValues.forEach(value => {\n    counts[value] = (counts[value] || 0) + 1;\n    })\n    for (const value in counts) {\n    let scoreToAdd = 0;\n    let messageToAdd = '';\n    const count = counts[value]\n   if (count >= 3) {\n       setBusted(false)\n  if (value === 1) {\n    scoreToAdd += value * 1000 * (2 ** (count - 3));\n  } else if (value === 2 || value === 3|| value === 4 || value === 5 || value=== 6){\n    scoreToAdd += value * 100 * (2 ** (count - 3));\n    \n  }\n  messageToAdd = `Multiplier x${count}!`;\n} \n\n\nsetMessage(messageToAdd);\nsetTheTriplet(true);\nsetCurrentScore(currentScore + scoreToAdd)\n    \n    }\n\n\n  \n    }\n    \n\n    \n   \n   \n   \n   \n   ///////////////////////////////////////////\n   \n   //////////////////////////////////////////// \n  if (straightFlush(heldDiceValues)) {\n    setDice(oldDice => oldDice.map(die => (\n      heldDiceValues.includes(die.value) ? {...die, value: 0} : die\n    )));\n    setTheStraightFlush(true);\n    setCurrentScore(currentScore + 1000);\n    setNewDiceBtnDisabled(false);\n    return;\n  }\n\n\n    const bigScore = bigMultiplier(heldDiceValues);\nif (bigScore > 0) {\n    setDice(oldDice => oldDice.map(die => (\n      heldDiceValues.includes(die.value) ? {...die, value: 0} : die\n    )));\n  setCurrentScore(currentScore + bigScore);\n  setRollBtnDisabled(false)\n  \n  return;\n}\n  if (threePairs(heldDiceValues)) {\n    setDice(oldDice => oldDice.map(die => (\n      heldDiceValues.includes(die.value) ? {...die, value: 0} : die\n    )));\n    setThreeBigPairs(true);\n    setCurrentScore(currentScore + 500);\n    setNewDiceBtnDisabled(false);\n    return;\n  } else {\n    if (!busted) {\n      setRollBtnDisabled(false);\n    } else {\n      setRollBtnDisabled(false);\n      setRollBtnDisabled(true);\n      setBankerinoBlock(true);\n    }\n    \n\n    let ones = 0;\n    let fives = 0;\n    let newDice = [...dice];\n\n    for (let i = 0; i < 6; i++) {\n      if (newDice[i].isHeld && (newDice[i].value === 1 || newDice[i].value === 5)) {\n        if (newDice[i].value === 1) {\n          ones++;\n        } else {\n          fives++;\n        }\n        newDice[i].isHeld = false;\n        newDice[i].value = 0;\n      }\n    }\n\n    setDice(newDice);\n    setCurrentScore((currentScore) + ones * 100 + fives * 50);\n    \n    if (ones === 0 && fives === 0) { \n      setBusted(true);\n      setCurrentScore(0);\n    } else {\n      setBusted(false);\n    }\n    \n  }\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n /////////////////////////////////////////////////////////////////////////////////////////////////\n /////////////////////////////////////////////////////////////////////////////////////////////////\n  \n \n\n\n //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   \n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    const endTurn = () => {\n        \n        setBankedScore(currentScore+bankedScore)\n        setCurrentScore(0)\n        setThreeBigPairs(false)\n        newSet()\n       \n        \n    }\n    const rollDice = () => {\n  if (currentScore > 350) {\n    setEndTurnBtnDisabled(false);\n  } else {\n    setEndTurnBtnDisabled(true);\n  }\n  setRollBtnDisabled(true);\n  setThreeBigPairs(false)\n  setTheTriplet(false)\n  let newDice;\n  if (currentScore > 0) {\n    newDice = dice.map((die) => {\n      return die.value !==0\n        ? { ...die, value: Math.floor(Math.random() * 6) + 1, isHeld: die.isHeld=false} \n        : { ...die };\n    });\n  } else {\n    newDice = !dice.map((die) => {\n      return die.value !==0\n        ? { ...die, value: Math.floor(Math.random() * 6) + 1 }\n        : { ...die };\n    });\n  }\n\n  const onesAndFives = newDice.filter((die) => die.value === 1 || die.value === 5);\n  if (onesAndFives.length === 0) {\n    setTimeout(() => {\n      setBusted(true);\n      setRollBtnDisabled(true);\n      setCurrentScore(0);\n      setMessage(<div><h1>YOU BUSTED!</h1></div>)\n      return (\n        message\n      );\n    }, 300);\n  } else {\n    setBusted(false);\n  }\n  setDice(newDice);\n};\nconst resetGame = () => {\n    setThreeBigPairs(false)\n    setTheTriplet(false)\n    setTheStraightFlush(false)\n    setBankedScore(0)\n    setCurrentScore(0)\n    localStorage.clear()\n    setBustCount(0)\n    newSet()\n}\n  const newSet = () => {\n      setThreeBigPairs(false)\n      setTheStraightFlush(false)\n      setRollBtnDisabled(true)\n      setTheTriplet(false)\n    \n    setNewDiceBtnDisabled(true);\n    setBankerinoBlock(false)\n  const newDice = [];\n    for (let i = 0; i < 6; i++) {\n      newDice.push({ id: nanoid(), value: Math.floor(Math.random() * 6) + 1, isHeld: false });\n    }\n    setDice(newDice)\n    setDiceSet(true)\n    setBusted(false);\n  };\n\n  useEffect(() => {\n    if (busted) {\n      localStorage.setItem('bankedScore', bankedScore);\n      setRollBtnDisabled(true)\n      setNewDiceBtnDisabled(false)\n      setBankerinoBlock(true)\n      setEndTurnBtnDisabled(true)\n      setBustCount(bustCount+1)\n    }\n  }, [busted]);\n  \n  useEffect(()=>{\n      if(currentScore < 350){\n          setEndTurnBtnDisabled(true)\n      }else {\n          setEndTurnBtnDisabled(false)\n      }\n  }, [currentScore])\n\n  return (\n    <div>\n        <div className=\"topSection\">\n            <div>\n            <p className=\"bankedText\">Score: {bankedScore}</p>\n            <p className=\"bustedText\">Busts: {bustCount}</p>\n            </div>\n            \n            <div>\n            {busted ?\n            <h1 className=\"gameh1\">YOU BUSTED!</h1>\n            : threeBigPairs ? \n            <h1 className=\"gameh1\">Three Pairs! +500!</h1>\n           : theStraightFlush ? \n           <h1 className = \"gameh1\">Straight Flush, +1000!</h1>\n           :\n            <h1 className=\"gameh1\">BANKED: {currentScore}</h1>\n            \n        }\n            </div>\n\n               \n            <div>\n            <button className=\"endTurnBtn\" onClick={endTurn} disabled={endTurnBtnDisabled}>End Turn</button>\n            <button className=\"resetBtn\" onClick={resetGame}>Reset Game</button>\n            </div>\n            \n        </div>\n      \n<div>\n      <div className=\"dice-container\">\n        {busted ? null :\n          dice.map((die) => (\n            die.value !== 0 && // Add this line to only render dice that haven't been banked\n            <Die\n              key={die.id}\n              id={die.id}\n              value={die.value}\n              isHeld={die.isHeld}\n              holdDice={() => holdDice(die.id)}\n            />\n          ))}\n      </div>\n      \n      \n      <div className=\"buttons1\">\n  {diceSet && (\n    <button className=\"rollBtn\" onClick={rollDice} disabled={rollBtnDisabled}>\n      Roll Dice\n    </button>\n  )}\n  <button className=\"newDiceBtn\" onClick={newSet} disabled={newDiceBtnDisabled}>\n    New Dice\n  </button>\n  <button className=\"bankBtn\" onClick={bankPoints} disabled={bankerinoBlock}>\n    Bank Points\n  </button>\n</div>\n      </div>\n     </div>\n  );\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}